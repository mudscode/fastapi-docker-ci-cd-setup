name: Deploy FastAPI to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ghcr.io/mudscode/fastapi-docker-ci-cd-setup
  CONTAINER_NAME: fastapi-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ${{ env.IMAGE_NAME }}:latest
          
          # Stop and remove existing container if it exists
          docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
          
          # Run the new container
          docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p 80:5000 \
            --restart unless-stopped \
            ${{ env.IMAGE_NAME }}:latest
          
          # Clean up old images (keep last 3)
          docker image prune -f
          
          # Verify deployment
          sleep 10
          curl -f http://localhost/health || exit 1
          echo "Deployment successful!"

    - name: Verify Deployment
      run: |
        echo "Application deployed successfully!"
        echo "Access your app at: http://${{ secrets.EC2_HOST }}"
        echo "Health check: http://${{ secrets.EC2_HOST }}/health"